```{r}
library(eRm)
library(ltm)
library(mirt)
library(tidyverse)

cri_responses <- read.csv("~/stats-homework/irt/cri/data/cri_responses_w_o3_scores.csv")

responses_wide <- cri_responses[c("user_id", "o3_mini_score", "chunk_slug")] %>%
  rename(score = o3_mini_score) %>%
  mutate(score = case_when(
    score %in% c(1, 2) ~ 0,
    score == 3 ~ 1,
    score %in% c(4, 5) ~ 2
  )) %>% 
  mutate(chunk_id = stringr::str_extract(chunk_slug, "[^-]+$")) %>%
  pivot_wider(
    id_cols = user_id,
    names_from = chunk_id,
    values_from = score
  )

responses_wide
```

```{r}
response_matrix <- subset(responses_wide, select = -user_id)
```

```{r}
pcm <- mirt(response_matrix, 1, itemtype='gpcm', method="EM", SE=TRUE, technical = list(message = TRUE)) 
pcm.coef <-coef(pcm, printSE=TRUE, as.data.frame=TRUE) 
pcm.coef  #a*theta + d; Linear parameterization
```


```{r}
# Use IRT parameterization for HW and a course project
pcm.coef.IRT <- coef(pcm, printSE=TRUE, IRTpars=TRUE, as.data.frame=TRUE) 
pcm.coef.IRT   # alpha(theta - threshold); IRT parameterization
```


```{r}
# Person parameters
theta <- fscores(pcm, full.scores.SE=TRUE) 
theta[1:10,]
```




```{r}
# CCC
itemplot(pcm, 14) #CCC for item 1      #CCC based on GPCM-like thresholds

itemplot(pcm, 14, type='threshold')    #CCC based on PCM thresholds


# Item & test Information functions
itemplot(pcm, 14, type = 'info') #item information for item 1
plot(pcm, type = 'info') #test information for all items
```
