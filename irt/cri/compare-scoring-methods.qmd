```{r}
library(mirt)
library(tidyverse)
library(ggplot2)
library(psych)
library(WrightMap)

cri_responses <- read.csv("~/stats-homework/irt/cri/data/cri_responses_w_o3_scores.csv") %>%
  select(user_id, score, o3_mini_score, chunk_slug) %>%
  mutate(o3_mini_score = case_when(
    o3_mini_score %in% c(1, 2) ~ 0,
    o3_mini_score == 3 ~ 1,
    o3_mini_score %in% c(4, 5) ~ 2
  )) %>% 
  mutate(item = stringr::str_extract(chunk_slug, "[^-]+$"))

binary_data <- cri_responses %>%
  mutate(score = case_when(
    score == 0 ~ 0,
    score %in% c(1, 2) ~ 1,
  )) %>%
  pivot_wider(
    id_cols = user_id,
    names_from = item,
    values_from = score
  ) %>% 
  select(-user_id)

# Extract just the response data (without user_id column)
o3_data <- cri_responses %>%
  pivot_wider(
    id_cols = user_id,
    names_from = item,
    values_from = o3_mini_score
  ) %>% 
  select(-user_id)
```

```{r}
# 1. Fit IRT models to both scoring methods
# For binary data, we'll use a Rasch model (1PL)
binary_model <- mirt(binary_data, model=1, itemtype = "Rasch", verbose = FALSE)

# For ordinal data, we'll fit both a PCM and GRM
ordinal_pcm <- mirt(o3_data, 1, itemtype = "Rasch", verbose = FALSE)
ordinal_grm <- mirt(o3_data, 1, itemtype = "graded", verbose = FALSE)

# 2. Compare model fit
# Calculate AIC and BIC for model comparison
aic_bic <- data.frame(
  Model = c("Binary (Rasch)", "Ordinal (PCM)", "Ordinal (GRM)"),
  AIC = c(extract.mirt(binary_model, "AIC"),
          extract.mirt(ordinal_pcm, "AIC"),
          extract.mirt(ordinal_grm, "AIC")),
  BIC = c(extract.mirt(binary_model, "BIC"),
          extract.mirt(ordinal_pcm, "BIC"),
          extract.mirt(ordinal_grm, "BIC"))
)
print(aic_bic)

# Choose the best-fitting model for the ordinal data
# If GRM fits better (as in the paper), we'll proceed with that
best_ordinal_model <- if(extract.mirt(ordinal_grm, "AIC") - extract.mirt(ordinal_pcm, "AIC") > 5) {
  print("GRM selected!")
  ordinal_grm
} else {
  print("PCM selected!")
  ordinal_pcm
}
```


```{r}
# 3. Examine test information functions
# Create a sequence of theta values
theta_seq <- seq(-4, 4, by = 0.1)

# Calculate test information for both models
binary_info <- testinfo(binary_model, theta_seq)
ordinal_info <- testinfo(best_ordinal_model, theta_seq)

# Create a data frame for plotting
info_df <- data.frame(
  Theta = theta_seq,
  Binary = binary_info,
  Ordinal = ordinal_info,
  Relative_Efficiency = ordinal_info / binary_info
)

# 4. Plot the test information curves
ggplot(info_df, aes(x = Theta)) +
  geom_line(aes(y = Binary, color = "Binary")) +
  geom_line(aes(y = Ordinal, color = "Ordinal")) +
  labs(title = "Test Information Functions",
       x = "Theta (Latent Trait)",
       y = "Information",
       color = "Scoring Method") +
  theme_minimal()
```


```{r}
# 5. Plot the relative efficiency (as in Fig. 1 in the paper)
ggplot(info_df, aes(x = Theta, y = Relative_Efficiency)) +
  geom_line() +
  geom_hline(yintercept = 1, linetype = "dashed") +
  labs(title = "Relative Efficiency of Ordinal vs. Binary Scoring",
       x = "Theta",
       y = "Relative Test Information") +
  theme_minimal()
```


```{r}
# 6. Examine item parameters and thresholds for a few representative items
# Get item parameters for both models
binary_params <- coef(binary_model, simplify = TRUE)$items
ordinal_params <- coef(best_ordinal_model, simplify = TRUE)$items
```


```{r}
# 7. Create item characteristic curves for selected items using ggplot2
# Select some representative items
item_ids <- 1:5  # First 5 items

# Alternative approach: use extract.item function and trace.lines to get ICC data
plot_item_curves_ggplot <- function(model, item_num, item_name, model_name) {
  # Extract trace lines (category probabilities)
  theta <- seq(-4, 4, length.out = 100)
  #extract.item(binary_model, 1)
  trace <- probtrace(extract.item(model, item_num), theta)
  print(trace)
  # Convert to data frame for ggplot
  n_cats <- ncol(trace)
  df <- data.frame(
    Theta = rep(theta, n_cats),
    Probability = as.vector(trace),
    Response = rep(as.character(0:(n_cats-1)), each = length(theta))
  )
  
  # Create plot
  p <- ggplot(df, aes(x = Theta, y = Probability, color = Response)) +
    geom_line(linewidth = 1) +
    labs(title = paste(model_name, "ICC for Item", item_name),
         x = "Theta (Latent Trait)",
         y = "Probability",
         color = "Response Category") +
    theme_minimal() +
    ylim(0, 1)
  
  return(p)
}

# Create plots for each selected item
for (item in item_ids) {
  # Get item name for the title
  item_name <- colnames(binary_data)[item]
  
  # Create and print binary plot
  binary_plot <- plot_item_curves_ggplot(binary_model, item, item_name, "Binary")
  print(binary_plot)
  
  # Create and print ordinal plot
  ordinal_plot <- plot_item_curves_ggplot(best_ordinal_model, item, item_name, "Ordinal")
  print(ordinal_plot)
}
```


```{r}
# 8. Calculate reliability metrics
get_reliability <- function(model) {
  # Extract item parameters
  item_params <- coef(model, simplify=TRUE)$items
  
  # Extract person parameters (theta estimates and standard errors)
  theta_est <- fscores(model, method="EAP")[,1]
  theta_sem <- fscores(model, method="EAP", full.scores.SE=TRUE)[,2]
  
  # Calculate person separation reliability
  # Formula: reliability = variance(theta) / (variance(theta) + mean(SE^2))
  theta_var <- var(theta_est)
  mean_sem_squared <- mean(theta_sem^2)
  person_separation_reliability <- theta_var / (theta_var + mean_sem_squared)
  
  return (person_separation_reliability)
}

reliability_df <- data.frame(
  Model = c("Binary", "Ordinal"),
  Reliability = c(get_reliability(binary_model), get_reliability(best_ordinal_model)),
  Marginal_Reliability = c(marginal_rxx(binary_model), marginal_rxx(best_ordinal_model))
)
print(reliability_df)
```
```{r}
mirt::coef(best_ordinal_model, IRTpars = TRUE, simplify = TRUE) %>%
  as.data.frame %>%
  tibble::rownames_to_column("items") 
```

```{r}
# 1. Item fit analysis with X2 (works with missing data)
item_fit <- mirt::itemfit(best_ordinal_model, fit_stats = c("X2"), na.rm = FALSE) %>% 
  mutate(across(where(is.numeric), round, 2))
print("Item Fit Statistics:")
print(item_fit)

# Create a more readable summary of item fit with X2
item_fit_summary <- data.frame(
  Item = item_fit$item,
  X2 = item_fit$X2,
  p_value = item_fit$p.X2,
  Significant = ifelse(item_fit$p.X2 < 0.05, "Yes", "No")
)
print(item_fit_summary)

# 2. Person fit analysis
# Person fit should work with missing data
person_fit <- mirt::personfit(best_ordinal_model)
print("Person Fit Statistics:")
print(head(person_fit))  # Show first few rows

# Summary statistics for z_h values
z_h_summary <- summary(person_fit$Zh)
print("Z_h Summary Statistics:")
print(z_h_summary)

# Count of potentially misfitting persons (typically |z_h| > 1.96)
misfitting_count <- sum(abs(person_fit$Zh) > 1.96, na.rm = TRUE)
total_valid_persons <- sum(!is.na(person_fit$Zh))
fit_percentage <- (total_valid_persons - misfitting_count) / total_valid_persons * 100
print(paste("Number of potentially misfitting persons (|z_h| > 1.96):", misfitting_count))
print(paste("Percentage of fitting persons:", round(fit_percentage, 2), "%"))


# Visualization for item fit using X2 instead of S_X2
ggplot(item_fit_summary, aes(x = reorder(Item, -X2), y = X2)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  geom_hline(yintercept = qchisq(0.95, df = mean(item_fit$df)), linetype = "dashed", color = "red") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Item Fit Statistics (X²)", 
       x = "Item", 
       y = "X² Value",
       caption = "Red line indicates critical chi-square value at alpha = 0.05")

# Visualization for person fit
person_fit_df <- data.frame(z_h = person_fit$Zh)
ggplot(person_fit_df, aes(x = z_h)) +
  geom_histogram(binwidth = 0.5, fill = "steelblue", color = "black") +
  geom_vline(xintercept = c(-1.96, 1.96), linetype = "dashed", color = "red") +
  labs(title = "Distribution of Person Fit (z_h) Values", 
       x = "z_h Values", 
       y = "Count",
       caption = "Red lines indicate thresholds at z_h = -1.96 and z_h = 1.96")
```


```{r}

personDist <- function(model, 
                       theta_range = c(-4, 4),
                       density = FALSE,
                       bins = 35) {
  
  person.params <- fscores(model, QMC = TRUE) %>%
    as.data.frame() 
  
  if(length(person.params) != 1) {
    p <- person.params %>%
      tidyr::pivot_longer(names(.), names_to = "dimension") %>%
      ggplot(aes(x = value, fill = dimension)) 
      
  } else {
  
  p <- person.params %>%
    pivot_longer(names(.), names_to = "dimension") %>%
    ggplot(aes(x = value, fill = dimension)) +
    guides(fill = "none")
  }
  
  if(isTRUE(density)) {
    
    p <- p + geom_density()
    
  } else {
    
    p <- p + geom_histogram(bins = bins, color = "white")
  }

  
  p + xlim(theta_range) + theme_minimal() + labs(x = expression(theta))
  
}

itemDist <- function(model,
                     theta_range = c(-4, 4),
                     line_size = 0.5,
                     point_size = 2,
                     point_color = "red",
                     line_color = "red",
                     point_shape = 17,
                     mean_point_size = 3,
                     mean_point_color = "black",
                     mean_point_shape = 18,
                     label_thresholds = TRUE,    # Add option to toggle labels
                     label_size = 3,             # Add size for labels
                     label_hjust = -0.5,         # Horizontal adjustment
                     label_vjust = 0.5) {        # Vertical adjustment
  
  # Get the item parameters
  item.params <- mirt::coef(model, IRTpars = TRUE, simplify = TRUE) %>%
    as.data.frame() %>%
    tibble::rownames_to_column("items")
  
  # Find all b-parameter columns - works with both "items.b" and "items.b1", etc.
  b_cols <- grep("^items\\.b\\d*$", names(item.params), value = TRUE)
  
  # Reshape data to long format
  item_long <- item.params %>%
    tidyr::pivot_longer(
      cols = all_of(b_cols),
      names_to = "parameter",
      values_to = "value"
    ) %>%
    # Extract threshold number from parameter name
    mutate(
      threshold_num = case_when(
        parameter == "items.b" ~ "1",  # If it's just "items.b", assign "1"
        TRUE ~ stringr::str_extract(parameter, "\\d+")  # Otherwise extract the number
      )
    )
  
  # Calculate summary statistics for each item
  item_summary <- item_long %>%
    group_by(items) %>%
    summarize(
      min_value = min(value, na.rm = TRUE),
      mean_value = mean(value, na.rm = TRUE),
      max_value = max(value, na.rm = TRUE)
    )
  
  # Create the plot
  p <- ggplot() +
    # Add lines for the range - thinner lines
    geom_segment(
      data = item_summary,
      aes(y = forcats::fct_reorder(items, mean_value), 
          x = min_value, xend = max_value, yend = forcats::fct_reorder(items, mean_value)),
      size = line_size, 
      color = line_color
    ) +
    # Add points for each threshold
    geom_point(
      data = item_long,
      aes(y = forcats::fct_reorder(items, item_summary$mean_value[match(items, item_summary$items)]), 
          x = value),
      size = point_size, 
      color = point_color,
      shape = point_shape
    )

  # Add labels for thresholds if requested
  if(label_thresholds) {
    p <- p + 
      geom_text(
        data = item_long,
        aes(y = forcats::fct_reorder(items, item_summary$mean_value[match(items, item_summary$items)]), 
            x = value,
            label = threshold_num),
        size = label_size,
        hjust = label_hjust,
        vjust = label_vjust
      )
  }

  p + xlim(theta_range) + 
    theme_minimal() + 
    labs(x = expression(theta), y = "")
}

itempersonMap <- function(model,
                          theta_range = c(-4,4),
                          title = "Item Person Map",
                          margin = c(1,0,-1.5,0),
                          density = FALSE,
                          color = "red",
                          shape = 20,
                          size = 2,
                          line_size = 0.5,
                          mean_point_size = 1,
                          mean_point_shape = 18,
                          mean_point_color = "black",
                          label_thresholds = TRUE,    # Add label parameter
                          label_size = 2.8,             # Add label size parameter
                          label_hjust = -.5,         # Add label hjust parameter
                          label_vjust = .5,          # Add label vjust parameter
                          theme = theme_minimal(),
                          ...) {
  
  p1 <- personDist(model, theta_range = theta_range, density = density) + 
    theme + 
    theme(plot.margin = unit(margin,"cm")) + 
    labs(title = title)
  
  p2 <- itemDist(model, 
                theta_range = theta_range, 
                point_shape = shape, 
                point_color = color, 
                point_size = size,
                line_size = line_size,
                line_color = color,
                mean_point_size = mean_point_size,
                mean_point_shape = mean_point_shape,
                mean_point_color = mean_point_color,
                label_thresholds = label_thresholds,
                label_size = label_size,
                label_hjust = label_hjust,
                label_vjust = label_vjust,
                ...) + 
    theme
  
  p <- cowplot::plot_grid(p1, p2,
                          nrow = 2,
                          rel_heights = c(1.5,2.5),
                          align = "hv",
                          axis = "tlbr")
  
  return(p)
}
```

```{r}
itempersonMap(binary_model, label_thresholds = FALSE, theta_range=c(-5,3))
```


```{r}
itempersonMap(best_ordinal_model, theta_range=c(-3,3))
```


